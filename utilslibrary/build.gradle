apply plugin: 'com.android.library'
apply plugin: 'maven'
android {
    compileSdkVersion Integer.parseInt(project.COMPILE_SDK_VERSION)

    defaultConfig {
        minSdkVersion Integer.parseInt(project.MIN_SDK_VERSION)
        targetSdkVersion Integer.parseInt(project.TARGET_SDK_VERSION)
        versionCode Integer.parseInt(project.VERSION_CODE)
        versionName project.VERSION_NAME
        //如果dex文件合并失败就开启,65535
        multiDexEnabled false
    }
    /*lintOptions{
        //遇到错误终止打包，false为不会终止
        abortOnError true
    }*/
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    api "com.android.support:appcompat-v7:${project.SUPPORT_VERSION}"
    api "com.android.support:design:${project.SUPPORT_VERSION}"
}
//删除生成的jar
task clearJar(type: Delete) {
    delete 'build/libs/' + 'coszero_utilslibrary_v' + project.VERSION_NAME + '.jar'
    delete 'libs/' + 'coszero_utilslibrary_v' + project.VERSION_NAME + '.jar'
}

//打包任务,去除了配置文件，算是一种优化
task makeJar(type: Jar) {
    //指定生成的jar名
    baseName 'coszero_utilslibrary_v' + project.VERSION_NAME
    //从哪里打包class文件
    from('build/intermediates/classes/release/com/coszero/utilslibrary')
    //打包到jar后的目录结构
    into('com/coszero/utilslibrary/')
    //去掉不需要打包的目录和文件
    exclude('BuildConfig.class', 'R.class')
    //去掉R$开头的文件
    exclude { it.name.startsWith('R$'); }
}
makeJar.dependsOn(clearJar, build)

//生成jar并将生成的jar复制到指定位置
/*task makeJar(type: Copy) {
    //删除存在的
    delete 'build/libs/mysdk.jar'
    //设置拷贝的文件
    from('build/intermediates/packaged-classes/release/')
    //打进jar包后的文件目录
    into('build/libs/')
    //将classes.jar放入build/libs/目录下
    //include ,exclude参数来设置过滤
    //（我们只关心classes.jar这个文件）
    include('classes.jar')
    //重命名
    rename('classes.jar', 'coszero_utilslibrary_v' + project.VERSION_NAME + '.jar')
}

makeJar.dependsOn(build)
//在终端执行生成JAR包
// gradlew makeJar*/
//上传代码到远程仓库
uploadArchives {
    repositories.mavenDeployer {
// 配置本地仓库路径，项目根目录下的repository目录中
        repository(url: uri('../repository'))
        pom.groupId = "com.coszero.utilslibrary"
// 唯一标识（通常为模块包名，也可以任意）
        pom.artifactId = "utilslibrary"
// 项目名称（通常为类库模块名称，也可以任意）
        pom.version = "1.1.0"
// 版本号
    }
}